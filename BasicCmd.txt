docker run nginx - Start a container
docker ps - List containers
docker ps -a - List of containers active or exited
docker stop container_name - Stop a container
docker rm container_name - Remove a container
docker images - List of images
docker rmi image_name - Remove an image_name
docker pull image_name - Pull / download an image
docker exec container_name cat /etc/hosts - Executes command on running container
docker run container -  Run or rather attaches to the container
docker attach cotainer_id - Attaches the container
docker run -d container_name - Runs the container in background
docker stop cotainer_id - Stops the running container
docker run -it container_name - i for input and t for launching the terminal in interactive mode of the container
docker run -p 80:5000 container_name - This binds the connection between 2 ports 80(container host) and 5000(container internal port)
docker run -v /dir_outside_container:/dir_inside_container container_name - This maps directory outside : insider container
docker inspect container_name - inspect the settings / configuration of the container
docker logs container_name - View logs of the mentioned container
docker build -t username/appName - Build docker image based on dockerfile
docker run -e ENV=value container_name - Set environment variable to used by the code (os.environ.get('ENV'))
docker run --name mysql-db -e MYSQL_ROOT_PASSWORD=db_pass123 -d mysql - Deploy MySQL server on Docker with PWD
docker run --name=appName container_name - Runs the container with the speicified name
docker run --links myContainer:container_in_host myContainer1 - This will link the two containers if they are inter-related

DEPLOY PRIVATE REGISTRY TO DOCKER
docker run -d -p 5000:5000 --name registry registry:2
docker image tag my-image localhost:5000/my-image
docker push localhost:5000/my-image / docker push 192.168.56.100:5000/my-image
docker pull localhost:5000/my-image / docker pull 192.168.56.100:5000/my-image